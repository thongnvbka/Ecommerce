@model  ModelView<Library.DbContext.Results.UserResult, UserFilterViewModel>

@{
    ViewBag.Title = "List of staff";
}

<section class="content-header">
    <h1>
        Staff management
    </h1>
    <ol class="breadcrumb">
        <li><a href="/"><i class="fa fa-dashboard"></i>Home</a></li>
        <li><a href="#">Category</a></li>
        <li class="active">List of staff</li>
    </ol>
</section>

@section Styles{
    <link rel="stylesheet" href="/Content/plugins/iCheck/all.css">
}
<!-- Main content -->
<section class="content">
    <div class="box box-primary">
        <div class="box-body pad">
            <form action="@Model.PageInfo.Url" id="searchForm" method="post" role="form" class="form-inline">
                <div class="form-group">
                    <input type="checkbox" name="SearchInfo.HasChilds" value="@(Model.SearchInfo.HasChilds ? "true": "false")" class="checkbox minimal" />
                    @*@Html.CheckBoxFor(x => x.SearchInfo.HasChilds, new Dictionary<string, object>()
                    {
                        {"class", "checkbox minimal"}
                    })*@
                    @*Cả nhân viên đơn vị dưới*@Including sub-branch staff
                </div>
                <div class="form-group">
                    <div id="user_filter_office_tree"></div>
                    @Html.HiddenFor(x => x.SearchInfo.OfficeId)
                    @Html.HiddenFor(x => x.SearchInfo.OfficeIdPath)
                </div>
                <div class="form-group">
                    @Html.DropDownListFor(x=> x.SearchInfo.TitleId, new List<SelectListItem>()
                    {
                        new SelectItem() {Text = "Choose title", Selected = true}
                    }, new Dictionary<string, object>()
                    {
                        {"class", "form-control" },
                        {"onChange", "searchForm()" }
                    })
                </div>
                <div class="form-group">
                    <div class="input-group">
                        @Html.TextBoxFor(x => x.SearchInfo.Keyword, new Dictionary<string, object>()
                        {
                            {"class", "form-control"},
                            {"placeholder", "Search ..." }
                        })
                        @Html.HiddenFor(x => x.PageInfo.CurrentPage)
                        <span class="input-group-btn">
                            <button type="submit" class="btn btn-primary"><i class="fa fa-search"></i></button>
                        </span>
                    </div>
                </div>
                @if (CheckPermision(EnumPage.Staff, EnumAction.Add))
                {
                    <div class="form-group pull-right">
                        <div class="form-group">
                            <div class="btn-group">
                                <button aria-expanded="false" aria-haspopup="true" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" type="button">
                                    <i class="fa fa-user-plus"></i> Add staff <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu pull-right">
                                    <li><a class="show-model" data-modal="quick-add-staff-modal" href="javascript:;"><i class="fa fa-bolt"></i> Quick add</a></li>
                                    <li><a href="@Url.Action("Create", "User")"><i class="fa fa-user-plus"></i> Full add</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                }
            </form>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12" id="body-table">
            @Html.Partial("_List", Model)
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->
</section>

@if (CheckPermision(EnumPage.Staff, EnumAction.Add))
{
    @Html.Partial("QuickAdd", new QuickAddUserMeta() {Password = "Abc123456"})
}
<!-- /.content -->
@section Scripts{
    <script src="/Content/plugins/iCheck/icheck.min.js"></script>
}
@using (Html.BeginScriptBlock())
{
    <script type="text/javascript">
        // OfficeJsTre
        var officesTree = @Html.Raw(ViewBag.officeJsTree);

        function pagging(currentPage) {
            $("#PageInfo_CurrentPage").val(currentPage);
            searchForm();
        }

        function searchForm() {
            $("#searchForm").submit();
        }

        $(function () {
            var frm = $('#searchForm');
            frm.submit(function (ev) {
                $.ajax({
                    type: frm.attr('method'),
                    url: frm.attr('action'),
                    data: frm.serialize(),
                    success: function (data) {
                        $("#body-table").html(data);
                    }
                });

                ev.preventDefault();
            });

            $(".show-model")
                .click(function() {
                    $(this).data("modal");
                    $("#" + $(this).data("modal")).modal("show");
                });

            // Register event click delete
            $("#body-table")
                .on("click",
                    "a.delete-item",
                    function() {
                        var $this = $(this);
                        swal({
                                title: 'Are you sure to delete this item?',
                                text: 'Staff "' + $this.data("name") + '"',
                                type: 'warning',
                                showCancelButton: true,
                                //confirmButtonColor: '#3085d6',
                                //cancelButtonColor: '#d33',
                                cancelButtonText: 'Cancel',
                                confirmButtonText: 'Delete'
                            })
                            .then(function() {
                                $.post($this.data("url"),
                                    function(data) {
                                        if (data == -1) {
                                            toastr.warning("This staff does not exist or has been deleted");
                                            return;
                                        }
                                        if (data == -2) {
                                            toastr.warning("Cannot delete logged in staff");
                                            return;
                                        }
                                        toastr.success("Deleted successfully");
                                        searchForm();
                                    });
                            }, function(){});
                    });

            // Checkbox
            $('input[type="checkbox"].minimal, input[type="radio"].minimal').iCheck({
                checkboxClass: 'icheckbox_minimal-blue',
                radioClass: 'iradio_minimal-blue'
            }).on('ifChanged', function(event) {
                //$("input[type=hidden][name='SearchInfo.HasChilds']")
                //    .val($("#SearchInfo_HasChilds").attr("checked") == "checked");
                searchForm();
            });

            // Init jstree of office
            $("#user_filter_office_tree").dropdownjstree({
                source: officesTree,
                dropdownLabel: 'Choose department',
                dropdownLabelClick: () => {
                    $("#SearchInfo_OfficeId").val("1");
                    $("#SearchInfo_OfficeIdPath").val("1");
                    filterChangeOfficeId(1);
                    searchForm();
                },
                selectedNode: '@Model.SearchInfo.OfficeId.ToString()',
                selectNote: (node, selected) => {
                    $("#SearchInfo_OfficeId").val(selected.selected[0]);
                    $("#SearchInfo_OfficeIdPath").val(selected.node.original.idPath);
                    filterChangeOfficeId(selected.selected[0]);
                    searchForm();
                }//,
                //ready: () => {
                //    console.log("ready");
                //}
            });

            // Update dropdown titles when office changed
            function filterChangeOfficeId(officeId) {
                $("#searchForm #SearchInfo_TitleId").attr('disabled', 'disabled');

                $.get("@Url.Action("PossitionByOffice", "Position")?officeId=" + officeId,
                    function(data) {
                        var options = '<option value="" selected>Choose title</option>';
                        $.each(data,
                            function(idx, item) {
                                options = options +
                                    '<option value="' +
                                    item.id +
                                    '">' +
                                    item.name +
                                    '</option>';
                            });
                        $("#searchForm #SearchInfo_TitleId").html(options);
                        $("#searchForm #SearchInfo_TitleId").removeAttr('disabled');
                    });
            }



            @if (TempData["Msg"] != null) {
                <text>toastr.success('@Html.Raw(TempData["Msg"])');</text>
            }
        });
    </script>
}
